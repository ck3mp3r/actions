---
name: "GitHub Settings Manager"
description: "Idempotently manage GitHub repository settings including branch protection, merge settings, and security policies"
author: "ck3mp3r"

inputs:
  repository:
    description: "Target repository in format 'owner/repo' (defaults to current repository)"
    required: false
    default: ""
  settings-file:
    description: "Path to repository configuration file"
    required: false
    default: ".github/repo-config.yaml"
  gh-token:
    description: "GitHub token for API access"
    required: false
    default: ${{ github.token }}
  dry-run:
    description: "Show what would be changed without applying"
    required: false
    default: "false"
  compare-only:
    description: "Only compare current vs desired settings"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v20

    - name: Setup Nushell and GitHub CLI via Nix
      shell: bash
      run: |
        echo "Installing Nushell and GitHub CLI via nix..."
        nix profile install nixpkgs#nushell nixpkgs#gh
        nu --version
        gh --version

    - name: Apply GitHub Settings
      shell: nu {0}
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
      run: |
        # GitHub Settings Management Script

        # Load the GitHub settings module
        source ${{ github.action_path }}/gh-settings.nu

        # Determine target repository (use input or current repo)
        let target_repo = if ("${{ inputs.repository }}" | is-empty) { "${{ github.repository }}" } else { "${{ inputs.repository }}" }
        let repo_parts = ($target_repo | split row "/")
        let owner = ($repo_parts | first)
        let repo = ($repo_parts | last)

        let settings_file = "${{ inputs.settings-file }}"
        let dry_run = ("${{ inputs.dry-run }}" == "true")
        let compare_only = ("${{ inputs.compare-only }}" == "true")

        print $"Managing repository configuration for ($owner)/($repo)"
        print $"Configuration file: ($settings_file)"
        print $"Dry run: ($dry_run)"
        print $"Compare only: ($compare_only)"

        # Check if configuration file exists
        if not ($settings_file | path exists) {
          print $"Configuration file not found: ($settings_file)"
          print "Generating default configuration file..."
          generate-default-settings $settings_file
          print $"Default configuration created at ($settings_file)"
          print "Please customize the configuration and run again."
          exit 0
        }

        # Load configuration (open automatically handles YAML parsing)
        let config = (open $settings_file)
        print "Configuration loaded successfully"

        # Determine mode
        if $compare_only {
          print "=== COMPARISON MODE ==="
          compare-github-settings $owner $repo $config
        } else if $dry_run {
          print "=== DRY RUN MODE ==="
          apply-github-settings $owner $repo $config true
        } else {
          print "=== APPLYING SETTINGS ==="
          apply-github-settings $owner $repo $config false
        }

branding:
  icon: "settings"
  color: "blue"

