---
name: "SemVer Version Action"
description: "Calculates the next semantic version"
inputs:
  current-version:
    description: "Current version"
    required: true
  detect-branch-builds:
    description: "Flag to indicate if this is a branch build"
    required: false
    default: "false"
outputs:
  semver:
    value: ${{ steps.calc-semver.outputs.semver }}
    description: "Generated SemVer version"
runs:
  using: "composite"
  steps:
    - id: calc-semver
      shell: bash
      run: |
        current_version="${{ inputs.current-version }}"
        detect_branch_builds="${{ inputs.detect-branch-builds }}"

        # Strip the 'v' prefix from the version to get the semantic version
        current_version=${current_version#v}

        # Fetch latest tag prefixed with 'v' (make grep non-fatal)
        latest_tag=$(git tag | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | sort -V | tail -n 1 || true)

        # Strip the 'v' prefix from the tag to get the semantic version
        latest_semver=${latest_tag#v}

        # Extract major, minor, and patch versions
        major_version_current=$(echo $current_version | cut -d'.' -f1)
        minor_version_current=$(echo $current_version | cut -d'.' -f2)
        patch_version_current=$(echo $current_version | cut -d'.' -f3)

        major_version_latest=$(echo $latest_semver | cut -d'.' -f1)
        minor_version_latest=$(echo $latest_semver | cut -d'.' -f2)
        patch_version_latest=$(echo $latest_semver | cut -d'.' -f3)

        # Default major/minor/patch to 0 if empty
        if [[ -z "$major_version_latest" ]]; then
          major_version_latest=0
        fi
        if [[ -z "$minor_version_latest" ]]; then
          minor_version_latest=0
        fi
        if [[ -z "$patch_version_latest" ]]; then
          patch_version_latest=0
        fi

        # If major or minor versions have changed, tag with the version from the input
        if [[ "$major_version_current" != "$major_version_latest" || "$minor_version_current" != "$minor_version_latest" ]]; then
            SEMVER_VERSION=$current_version
        # If major and minor versions have not changed, bump the patch version and tag
        elif [[ "$major_version_current" == "$major_version_latest" && "$minor_version_current" == "$minor_version_latest" ]]; then
            new_patch_version=$((patch_version_latest+1))
            new_version="$major_version_current.$minor_version_current.$new_patch_version"
            SEMVER_VERSION=$new_version
        fi

        # If detect-branch-builds is true and we're not on main branch, append short SHA
        if [[ "$detect_branch_builds" == "true" ]]; then
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            if [[ "$current_branch" != "main" ]]; then
                SEMVER_VERSION="${SEMVER_VERSION}-$(git rev-parse --short HEAD)"
            fi
        fi

        if [[ -z "$SEMVER_VERSION" ]]; then
          echo "Error: SEMVER_VERSION is empty. Check input and tags." >&2
          exit 1
        fi
        echo "semver=$SEMVER_VERSION" >> $GITHUB_OUTPUT
